"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤
"""

import threading
import time
from datetime import datetime
from logger import logger

class ScheduledPostsManager:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.scheduler_running = False
        self.channel_id = "-1002566537425"
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
        self.schedule = {
            'morning': '09:00',
            'afternoon': '14:00', 
            'evening': '19:00'
        }
        
        self.start_scheduler()
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤"""
        if self.scheduler_running:
            return
        
        def scheduler_worker():
            while True:
                try:
                    self.check_and_send_posts()
                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤: {e}")
                    time.sleep(300)
        
        scheduler_thread = threading.Thread(target=scheduler_worker, daemon=True)
        scheduler_thread.start()
        self.scheduler_running = True
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω (3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)")
    
    def check_and_send_posts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        current_time = time.strftime('%H:%M')
        current_date = time.strftime('%Y-%m-%d')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        for period, scheduled_time in self.schedule.items():
            if current_time == scheduled_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è
                already_sent = self.db.execute_query('''
                    SELECT COUNT(*) FROM post_statistics 
                    WHERE time_period = ? AND DATE(sent_at) = ?
                ''', (period, current_date))
                
                if not already_sent or already_sent[0][0] == 0:
                    self.send_auto_post(period)
    
    def send_auto_post(self, period):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ ({period})...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            templates = self.db.execute_query('''
                SELECT id, title, content, post_type, image_url
                FROM auto_post_templates 
                WHERE is_active = 1
                ORDER BY RANDOM()
                LIMIT 1
            ''')
            
            if not templates:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤")
                return
            
            template = templates[0]
            template_id, title, content, post_type, image_url = template
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self.format_auto_post(title, content, post_type, period)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = self.create_post_keyboard()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            success = False
            try:
                if image_url:
                    result = self.bot.send_photo(self.channel_id, image_url, message_text, keyboard)
                else:
                    result = self.bot.send_message(self.channel_id, message_text, keyboard)
                
                if result and result.get('ok'):
                    success = True
                    logger.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {result}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.db.execute_query('''
                INSERT INTO post_statistics (
                    post_id, time_period, sent_count, error_count, sent_at
                ) VALUES (?, ?, ?, ?, ?)
            ''', (
                template_id, period, 1 if success else 0, 0 if success else 1,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {e}")
    
    def format_auto_post(self, title, content, post_type, period):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞"""
        time_emojis = {
            'morning': 'üåÖ',
            'afternoon': '‚òÄÔ∏è',
            'evening': 'üåÜ'
        }
        
        time_greetings = {
            'morning': '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
            'afternoon': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å',
            'evening': '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä'
        }
        
        emoji = time_emojis.get(period, 'üì¢')
        greeting = time_greetings.get(period, '–ü—Ä–∏–≤–µ—Ç')
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{emoji} <b>{greeting}!</b>\n\n"
        
        if title:
            message += f"üì¢ <b>{title}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if post_type == 'greeting':
            message += content
        elif post_type == 'promotion':
            message += f"üî• {content}\n\n"
            message += f"üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å!"
        elif post_type == 'congratulation':
            message += f"üéâ {content}\n\n"
            message += f"üíù –û—Ç–ø—Ä–∞–∑–¥–Ω—É–π—Ç–µ —Å –Ω–∞–º–∏!"
        else:
            message += content
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        message += f"\n\nüõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥: /start"
        
        return message
    
    def create_post_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
        return {
            'inline_keyboard': [
                [
                    {'text': 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', 'url': 'https://t.me/your_bot_username'},
                    {'text': 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', 'url': 'https://your-website.com'}
                ],
                [
                    {'text': 'üì± –ö–∞—Ç–∞–ª–æ–≥ –≤ –±–æ—Ç–µ', 'url': 'https://t.me/your_bot_username?start=catalog'},
                    {'text': 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'url': 'https://t.me/your_support_username'}
                ]
            ]
        }
    
    def create_template(self, title, content, post_type, image_url=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞"""
        return self.db.execute_query('''
            INSERT INTO auto_post_templates (
                title, content, post_type, image_url, is_active, created_at
            ) VALUES (?, ?, ?, ?, 1, ?)
        ''', (
            title, content, post_type, image_url,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
    
    def get_templates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
        return self.db.execute_query('''
            SELECT id, title, content, post_type, image_url, is_active, created_at
            FROM auto_post_templates
            ORDER BY created_at DESC
        ''')
    
    def toggle_template_status(self, template_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–∞–±–ª–æ–Ω–∞"""
        current_status = self.db.execute_query(
            'SELECT is_active FROM auto_post_templates WHERE id = ?',
            (template_id,)
        )
        
        if current_status:
            new_status = 0 if current_status[0][0] else 1
            return self.db.execute_query(
                'UPDATE auto_post_templates SET is_active = ? WHERE id = ?',
                (new_status, template_id)
            )
        return None
    
    def delete_template(self, template_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
        return self.db.execute_query(
            'DELETE FROM auto_post_templates WHERE id = ?',
            (template_id,)
        )
    
    def get_statistics(self, days=7):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–≤"""
        return self.db.execute_query('''
            SELECT 
                apt.title,
                ps.time_period,
                SUM(ps.sent_count) as total_sent,
                SUM(ps.error_count) as total_errors,
                COUNT(*) as posts_count
            FROM post_statistics ps
            JOIN auto_post_templates apt ON ps.post_id = apt.id
            WHERE ps.sent_at >= date('now', '-{} days')
            GROUP BY apt.id, apt.title, ps.time_period
            ORDER BY ps.sent_at DESC
        '''.format(days))
    
    def send_manual_post(self, template_id):
        """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É"""
        template = self.db.execute_query(
            'SELECT title, content, post_type, image_url FROM auto_post_templates WHERE id = ?',
            (template_id,)
        )
        
        if not template:
            return False, "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        title, content, post_type, image_url = template[0]
        
        try:
            message_text = self.format_auto_post(title, content, post_type, 'manual')
            keyboard = self.create_post_keyboard()
            
            if image_url:
                result = self.bot.send_photo(self.channel_id, image_url, message_text, keyboard)
            else:
                result = self.bot.send_message(self.channel_id, message_text, keyboard)
            
            if result and result.get('ok'):
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.db.execute_query('''
                    INSERT INTO post_statistics (
                        post_id, time_period, sent_count, error_count, sent_at
                    ) VALUES (?, ?, 1, 0, ?)
                ''', (
                    template_id, 'manual',
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                ))
                return True, "–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else:
                return False, f"–û—à–∏–±–∫–∞ Telegram API: {result}"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")
            return False, str(e)
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

from datetime import datetime
from keyboards import (
    create_main_keyboard, create_categories_keyboard, create_subcategories_keyboard,
    create_products_keyboard, create_product_inline_keyboard, create_cart_keyboard,
    create_registration_keyboard, create_order_keyboard, create_back_keyboard,
    create_confirmation_keyboard, create_search_filters_keyboard,
    create_price_filter_keyboard, create_rating_keyboard, create_language_keyboard,
    create_payment_methods_keyboard, create_cart_item_keyboard
)
from utils import (
    format_price, format_date, validate_email, validate_phone, 
    truncate_text, calculate_cart_total, format_cart_summary,
    create_product_card, log_user_action
)
from localization import t, get_user_language
from config import MESSAGES, ORDER_STATUSES, PAYMENT_METHODS
from logger import logger

class MessageHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.user_states = {}
        self.notification_manager = None
        self.payment_processor = None
    
    def handle_message(self, message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            log_user_action(telegram_id, 'message', text[:50])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            
            if not user_data and text != '/start':
                self._send_registration_prompt(chat_id)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text == '/start':
                self._handle_start_command(message)
            elif text == '/help':
                self._handle_help_command(message)
            elif text.startswith('/order_'):
                self._handle_order_command(message)
            elif text.startswith('/track_'):
                self._handle_track_command(message)
            elif text.startswith('/promo_'):
                self._handle_promo_command(message)
            elif text.startswith('/restore_'):
                self._handle_restore_command(message)
            elif text == 'üõç –ö–∞—Ç–∞–ª–æ–≥':
                self._show_categories(chat_id, telegram_id)
            elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
                self._show_cart(chat_id, telegram_id)
            elif text == 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
                self._show_user_orders(chat_id, telegram_id)
            elif text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                self._show_user_profile(chat_id, telegram_id)
            elif text == 'üîç –ü–æ–∏—Å–∫':
                self._start_search(chat_id, telegram_id)
            elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
                self._handle_help_command(message)
            elif text == '‚≠ê –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏':
                self._show_loyalty_program(chat_id, telegram_id)
            elif text == 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã':
                self._show_available_promos(chat_id, telegram_id)
            elif text == 'üîô –ì–ª–∞–≤–Ω–∞—è':
                self._show_main_menu(chat_id, telegram_id)
            elif text == 'üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫':
                self._start_language_change(chat_id, telegram_id)
            else:
                self._handle_text_input(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            self.bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        try:
            data = callback_query['data']
            chat_id = callback_query['message']['chat']['id']
            message_id = callback_query['message']['message_id']
            telegram_id = callback_query['from']['id']
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            log_user_action(telegram_id, 'callback', data)
            
            if data.startswith('add_to_cart_'):
                self._handle_add_to_cart_callback(callback_query)
            elif data.startswith('add_to_favorites_'):
                self._handle_add_to_favorites_callback(callback_query)
            elif data.startswith('reviews_'):
                self._handle_reviews_callback(callback_query)
            elif data.startswith('rate_product_'):
                self._handle_rate_product_callback(callback_query)
            elif data.startswith('rate_'):
                self._handle_rating_callback(callback_query)
            elif data.startswith('cart_'):
                self._handle_cart_action_callback(callback_query)
            elif data.startswith('pay_'):
                self._handle_payment_callback(callback_query)
            elif data.startswith('sort_') or data.startswith('price_'):
                self._handle_search_filter_callback(callback_query)
            else:
                self._handle_unknown_callback(callback_query)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}", exc_info=True)
    
    def _handle_start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        
        if user_data:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_language = user_data[0][5]
            welcome_text = t('welcome_back', language=user_language)
            self.bot.send_message(chat_id, welcome_text, create_main_keyboard())
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            self._start_registration(message)
    
    def _handle_help_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        user_language = get_user_language(self.db, telegram_id)
        help_text = t('help', language=user_language)
        
        self.bot.send_message(chat_id, help_text, create_main_keyboard())
    
    def _handle_order_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /order_ID"""
        try:
            order_id = int(message['text'].split('_')[1])
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            order_details = self.db.get_order_details(order_id)
            
            if not order_details or order_details['order'][1] != user_id:
                self.bot.send_message(chat_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º")
                return
            
            self._show_order_details(chat_id, order_details)
            
        except (ValueError, IndexError):
            self.bot.send_message(message['chat']['id'], "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    
    def _handle_track_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /track_–ù–û–ú–ï–†"""
        try:
            tracking_number = message['text'].split('_')[1]
            chat_id = message['chat']['id']
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            tracking_info = self._get_tracking_info(tracking_number)
            
            if tracking_info:
                self._show_tracking_info(chat_id, tracking_info)
            else:
                self.bot.send_message(chat_id, "‚ùå –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except IndexError:
            self.bot.send_message(message['chat']['id'], "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞")
    
    def _handle_promo_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /promo_–ö–û–î"""
        try:
            promo_code = message['text'].split('_')[1]
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
            from promotions import PromotionManager
            promo_manager = PromotionManager(self.db)
            
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã
            cart_items = self.db.get_cart_items(user_id)
            cart_total = calculate_cart_total(cart_items)
            
            validation = promo_manager.validate_promo_code(promo_code, user_id, cart_total)
            
            if validation['valid']:
                promo_text = f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!</b>\n\n"
                promo_text += f"üéÅ {validation['description']}\n"
                promo_text += f"üí∞ –°–∫–∏–¥–∫–∞: {format_price(validation['discount_amount'])}\n\n"
                promo_text += f"üõí –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"
            else:
                promo_text = f"‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</b>\n\n{validation['error']}"
            
            self.bot.send_message(chat_id, promo_text)
            
        except IndexError:
            self.bot.send_message(message['chat']['id'], "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    
    def _handle_restore_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /restore_ID"""
        try:
            restore_id = message['text'].split('_')[1]
            chat_id = message['chat']['id']
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            self.bot.send_message(chat_id, f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {restore_id}...")
            
        except IndexError:
            self.bot.send_message(message['chat']['id'], "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
    
    def _start_registration(self, message):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ Telegram
        suggested_name = message['from'].get('first_name', '')
        if message['from'].get('last_name'):
            suggested_name += f" {message['from']['last_name']}"
        
        welcome_text = MESSAGES['welcome_new']
        self.bot.send_message(chat_id, welcome_text)
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        self.user_states[telegram_id] = 'registration_name'
        
        name_text = "üë§ <b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        keyboard = create_registration_keyboard('name', suggested_name)
        
        self.bot.send_message(chat_id, name_text, keyboard)
    
    def _handle_text_input(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        state = self.user_states.get(telegram_id)
        
        if state == 'registration_name':
            self._process_registration_name(message)
        elif state == 'registration_phone':
            self._process_registration_phone(message)
        elif state == 'registration_email':
            self._process_registration_email(message)
        elif state == 'registration_language':
            self._process_registration_language(message)
        elif state == 'search_query':
            self._process_search_query(message)
        elif state == 'order_address':
            self._process_order_address(message)
        elif state == 'rating_comment':
            self._process_rating_comment(message)
        elif text.startswith('üõç ') and ' - $' in text:
            self._handle_product_selection(message)
        elif self._is_category_button(text):
            self._handle_category_selection(message)
        else:
            self._handle_unknown_text(message)
    
    def _process_registration_name(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            self._cancel_registration(chat_id, telegram_id)
            return
        
        if len(text) < 2:
            self.bot.send_message(chat_id, "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        self.user_states[telegram_id] = 'registration_phone'
        self.user_states[f'{telegram_id}_name'] = text
        
        phone_text = "üì± <b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:"
        keyboard = create_registration_keyboard('phone')
        
        self.bot.send_message(chat_id, phone_text, keyboard)
    
    def _process_registration_phone(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            self._cancel_registration(chat_id, telegram_id)
            return
        elif text == '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            phone = None
        elif 'contact' in message:
            phone = message['contact']['phone_number']
        else:
            phone = validate_phone(text)
            if not phone:
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ email
        self.user_states[telegram_id] = 'registration_email'
        self.user_states[f'{telegram_id}_phone'] = phone
        
        email_text = "üìß <b>–í–∞—à email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n\n–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:"
        keyboard = create_registration_keyboard('email')
        
        self.bot.send_message(chat_id, email_text, keyboard)
    
    def _process_registration_email(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            self._cancel_registration(chat_id, telegram_id)
            return
        elif text == '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            email = None
        else:
            if not validate_email(text):
                self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            email = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        self.user_states[telegram_id] = 'registration_language'
        self.user_states[f'{telegram_id}_email'] = email
        
        language_text = "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:"
        keyboard = create_registration_keyboard('language')
        
        self.bot.send_message(chat_id, language_text, keyboard)
    
    def _process_registration_language(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        if text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
            language = 'ru'
        elif text == 'üá∫üáø O\'zbekcha':
            language = 'uz'
        else:
            self.bot.send_message(chat_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        self._complete_registration(message, language)
    
    def _complete_registration(self, message, language):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        name = self.user_states.get(f'{telegram_id}_name')
        phone = self.user_states.get(f'{telegram_id}_phone')
        email = self.user_states.get(f'{telegram_id}_email')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = self.db.add_user(telegram_id, name, phone, email, language)
        
        if user_id:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._clear_user_state(telegram_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            success_text = t('registration_complete', language=language)
            self.bot.send_message(chat_id, success_text, create_main_keyboard())
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if hasattr(self, 'marketing_automation') and self.marketing_automation:
                self.marketing_automation.create_welcome_series(user_id)
        else:
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def _cancel_registration(self, chat_id, telegram_id):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self._clear_user_state(telegram_id)
        self.bot.send_message(chat_id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
    
    def _clear_user_state(self, telegram_id):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keys_to_remove = [key for key in self.user_states.keys() if str(telegram_id) in str(key)]
        for key in keys_to_remove:
            del self.user_states[key]
    
    def _send_registration_prompt(self, chat_id):
        """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        prompt_text = "üëã –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        self.bot.send_message(chat_id, prompt_text)
    
    def _show_main_menu(self, chat_id, telegram_id):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        user_language = get_user_language(self.db, telegram_id)
        welcome_text = t('welcome_back', language=user_language)
        self.bot.send_message(chat_id, welcome_text, create_main_keyboard())
    
    def _show_categories(self, chat_id, telegram_id):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            categories = self.db.get_categories()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            self.bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
            return
        
        if categories:
            categories_text = "üõç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>"
            keyboard = create_categories_keyboard(categories)
            self.bot.send_message(chat_id, categories_text, keyboard)
        else:
            self.bot.send_message(chat_id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def _show_cart(self, chat_id, telegram_id):
        """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            user_language = user_data[0][5]
            empty_text = t('empty_cart', language=user_language)
            keyboard = create_cart_keyboard(False)
            self.bot.send_message(chat_id, empty_text, keyboard)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        total_amount = 0
        
        for item in cart_items:
            item_total = item[2] * item[3]
            total_amount += item_total
            
            cart_text += f"üõç <b>{item[1]}</b>\n"
            cart_text += f"üí∞ {format_price(item[2])} √ó {item[3]} = {format_price(item_total)}\n\n"
        
        cart_text += f"üí≥ <b>–ò—Ç–æ–≥–æ: {format_price(total_amount)}</b>"
        
        keyboard = create_cart_keyboard(True)
        self.bot.send_message(chat_id, cart_text, keyboard)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        for item in cart_items:
            item_keyboard = create_cart_item_keyboard(item[0], item[3])
            item_text = f"üõç {item[1]} - {format_price(item[2])}"
            
            if item[4]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.bot.send_photo(chat_id, item[4], item_text, item_keyboard)
            else:
                self.bot.send_message(chat_id, item_text, item_keyboard)
    
    def _show_user_orders(self, chat_id, telegram_id):
        """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user_id = user_data[0][0]
        orders = self.db.get_user_orders(user_id)
        
        if not orders:
            self.bot.send_message(chat_id, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return
        
        orders_text = "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = ORDER_STATUSES.get(order[3], '‚ùì')
            orders_text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n"
            orders_text += f"üí∞ {format_price(order[2])}\n"
            orders_text += f"üìÖ {format_date(order[7])}\n"
            orders_text += f"üëÜ /order_{order[0]} - –ø–æ–¥—Ä–æ–±–Ω–µ–µ\n\n"
        
        if len(orders) > 10:
            orders_text += f"... –∏ –µ—â–µ {len(orders) - 10} –∑–∞–∫–∞–∑–æ–≤"
        
        self.bot.send_message(chat_id, orders_text, create_back_keyboard())
    
    def _show_user_profile(self, chat_id, telegram_id):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        if not user_data:
            return
        
        user = user_data[0]
        user_id = user[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders_stats = self.db.execute_query('''
            SELECT COUNT(*), SUM(total_amount), MAX(created_at)
            FROM orders 
            WHERE user_id = ? AND status != 'cancelled'
        ''', (user_id,))
        
        loyalty_data = self.db.get_user_loyalty_points(user_id)
        
        profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        profile_text += f"üìù –ò–º—è: {user[2]}\n"
        
        if user[3]:
            profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user[3]}\n"
        if user[4]:
            profile_text += f"üìß Email: {user[4]}\n"
        
        profile_text += f"üåç –Ø–∑—ã–∫: {'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if user[5] == 'ru' else 'üá∫üáø O\'zbekcha'}\n"
        profile_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {format_date(user[6])}\n\n"
        
        if orders_stats and orders_stats[0][0] > 0:
            profile_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            profile_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {orders_stats[0][0]}\n"
            profile_text += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_price(orders_stats[0][1] or 0)}\n"
            profile_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {format_date(orders_stats[0][2])}\n\n"
        
        if loyalty_data:
            profile_text += f"‚≠ê <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b>\n"
            profile_text += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {loyalty_data[4]}\n"
            profile_text += f"üíé –ë–∞–ª–ª—ã: {loyalty_data[2]}\n"
        
        keyboard = {
            'keyboard': [
                ['üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'],
                ['üîô –ì–ª–∞–≤–Ω–∞—è']
            ],
            'resize_keyboard': True
        }
        
        self.bot.send_message(chat_id, profile_text, keyboard)
    
    def _handle_add_to_cart_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        try:
            product_id = int(callback_query['data'].split('_')[-1])
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            result = self.db.add_to_cart(user_id, product_id, 1)
            
            if result:
                self.bot.send_message(chat_id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
            else:
                self.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É")
                
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
    
    def _handle_add_to_favorites_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            product_id = int(callback_query['data'].split('_')[-1])
            chat_id = callback_query['message']['chat']['id']
            telegram_id = callback_query['from']['id']
            
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            result = self.db.add_to_favorites(user_id, product_id)
            
            if result:
                self.bot.send_message(chat_id, "‚ù§Ô∏è –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            else:
                self.bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
                
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
    
    def _handle_cart_action_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""
        try:
            data_parts = callback_query['data'].split('_')
            action = data_parts[1]
            cart_item_id = int(data_parts[2])
            chat_id = callback_query['message']['chat']['id']
            
            if action == 'increase':
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                current_quantity = self._get_cart_item_quantity(cart_item_id)
                self.db.update_cart_quantity(cart_item_id, current_quantity + 1)
                self.bot.send_message(chat_id, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
                
            elif action == 'decrease':
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                current_quantity = self._get_cart_item_quantity(cart_item_id)
                if current_quantity > 1:
                    self.db.update_cart_quantity(cart_item_id, current_quantity - 1)
                    self.bot.send_message(chat_id, "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
                else:
                    self.db.remove_from_cart(cart_item_id)
                    self.bot.send_message(chat_id, "üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                    
            elif action == 'remove':
                # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
                self.db.remove_from_cart(cart_item_id)
                self.bot.send_message(chat_id, "üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π: {e}")
    
    def _get_cart_item_quantity(self, cart_item_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        result = self.db.execute_query(
            'SELECT quantity FROM cart WHERE id = ?',
            (cart_item_id,)
        )
        return result[0][0] if result else 1
    
    def _handle_unknown_callback(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback"""
        chat_id = callback_query['message']['chat']['id']
        self.bot.send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    def _handle_unknown_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI –ø–æ–¥–¥–µ—Ä–∂–∫—É
        if hasattr(self.bot, 'chatbot_support') and self.bot.chatbot_support:
            ai_response = self.bot.chatbot_support.find_best_answer(text)
            self.bot.send_message(chat_id, ai_response)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            help_text = "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            self.bot.send_message(chat_id, help_text, create_main_keyboard())
    
    def _get_tracking_info(self, tracking_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∏–Ω–≥–µ"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞
        return {
            'tracking_number': tracking_number,
            'status': '–í –ø—É—Ç–∏',
            'location': '–°–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
            'estimated_delivery': '2024-01-15'
        }
    
    def _show_tracking_info(self, chat_id, tracking_info):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–∏–Ω–≥–µ"""
        tracking_text = f"üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏</b>\n\n"
        tracking_text += f"üìç –ù–æ–º–µ—Ä: {tracking_info['tracking_number']}\n"
        tracking_text += f"üìã –°—Ç–∞—Ç—É—Å: {tracking_info['status']}\n"
        tracking_text += f"üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {tracking_info['location']}\n"
        tracking_text += f"üìÖ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {tracking_info['estimated_delivery']}"
        
        self.bot.send_message(chat_id, tracking_text, create_back_keyboard())
    
    def _show_order_details(self, chat_id, order_details):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
        order = order_details['order']
        items = order_details['items']
        
        details_text = f"üì¶ <b>–ó–∞–∫–∞–∑ #{order[0]}</b>\n\n"
        details_text += f"üìÖ –î–∞—Ç–∞: {format_date(order[7])}\n"
        details_text += f"üìã –°—Ç–∞—Ç—É—Å: {ORDER_STATUSES.get(order[3], order[3])}\n"
        details_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {PAYMENT_METHODS.get(order[5], order[5])}\n"
        
        if order[4]:
            details_text += f"üìç –ê–¥—Ä–µ—Å: {order[4]}\n"
        
        details_text += f"\nüõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        
        for item in items:
            item_total = item[0] * item[1]
            details_text += f"‚Ä¢ {item[2]} √ó {item[0]} = {format_price(item_total)}\n"
        
        details_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {format_price(order[2])}</b>"
        
        self.bot.send_message(chat_id, details_text, create_back_keyboard())
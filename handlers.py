"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
"""

import json
import re
from datetime import datetime, timedelta
from database import DatabaseManager
from keyboards import (
    create_main_keyboard, create_categories_keyboard, create_subcategories_keyboard,
    create_products_keyboard, create_product_inline_keyboard, create_cart_keyboard,
    create_registration_keyboard, create_order_keyboard, create_back_keyboard,
    create_confirmation_keyboard, create_search_filters_keyboard, create_rating_keyboard,
    create_language_keyboard, create_payment_methods_keyboard, create_cart_item_keyboard
)
from utils import format_price, format_date, validate_email, validate_phone, create_product_card
from localization import t, get_user_language
from config import MESSAGES, ORDER_STATUSES, PAYMENT_METHODS

class MessageHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.user_states = {}
        self.notification_manager = None
        self.payment_processor = None
    
    def handle_message(self, message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = message['chat']['id']
            telegram_id = message['from']['id']
            text = message.get('text', '')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            
            if not user_data:
                if text == '/start':
                    self.start_registration(message)
                else:
                    self.bot.send_message(
                        chat_id,
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
                    )
                return
            
            user_id = user_data[0][0]
            language = user_data[0][5]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = self.user_states.get(telegram_id, '')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if user_state.startswith('registration_'):
                self.handle_registration_step(message, user_state)
                return
            elif user_state.startswith('search_'):
                self.handle_search_process(message, user_state)
                return
            elif user_state.startswith('review_'):
                self.handle_review_process(message, user_state)
                return
            elif user_state.startswith('order_'):
                self.handle_order_process(message, user_state)
                return
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if text == '/start':
                self.show_main_menu(message, user_data[0])
            elif text == '/help':
                self.show_help(message, language)
            elif text.startswith('/order_'):
                self.show_order_details(message, text)
            elif text.startswith('/track_'):
                self.track_shipment(message, text)
            elif text.startswith('/promo_'):
                self.apply_promo_code(message, text)
            elif text.startswith('/restore_'):
                self.restore_saved_order(message, text)
            
            # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            elif text == 'üõç –ö–∞—Ç–∞–ª–æ–≥':
                self.show_catalog(message, language)
            elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
                self.show_cart(message, user_id, language)
            elif text == 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
                self.show_user_orders(message, user_id, language)
            elif text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                self.show_profile(message, user_data[0])
            elif text == 'üîç –ü–æ–∏—Å–∫':
                self.start_search(message, language)
            elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
                self.show_help(message, language)
            elif text == '‚≠ê –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏':
                self.show_loyalty_program(message, user_id, language)
            elif text == 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã':
                self.show_available_promos(message, user_id, language)
            elif text == 'üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫':
                self.show_advanced_search(message, language)
            elif text == 'üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑':
                self.start_tracking(message, language)
            elif text == 'üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫':
                self.change_language(message, language)
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            elif text == 'üîô –ì–ª–∞–≤–Ω–∞—è' or text == 'üè† –ì–ª–∞–≤–Ω–∞—è':
                self.show_main_menu(message, user_data[0])
            elif text == 'üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º':
                self.show_catalog(message, language)
            elif text == 'üîô –ù–∞–∑–∞–¥':
                self.handle_back_navigation(message, user_id, language)
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
            elif text.startswith('üì±') or text.startswith('üëï') or text.startswith('üè†') or text.startswith('‚öΩ') or text.startswith('üíÑ') or text.startswith('üìö'):
                self.handle_category_selection(message, text, language)
            
            # –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–±—Ä–µ–Ω–¥—ã
            elif text.startswith('üçé') or text.startswith('‚úîÔ∏è') or text.startswith('üëñ') or text.startswith('‚òï') or text.startswith('üëü') or text.startswith('üíé') or text.startswith('üìñ'):
                self.handle_subcategory_selection(message, text, language)
            
            # –¢–æ–≤–∞—Ä—ã
            elif text.startswith('üõç'):
                self.handle_product_selection(message, text, user_id, language)
            
            # –ö–æ—Ä–∑–∏–Ω–∞
            elif text == 'üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
                self.start_order_process(message, user_id, language)
            elif text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
                self.clear_cart(message, user_id, language)
            elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã':
                self.show_catalog(message, language)
            elif text == 'üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥':
                self.show_catalog(message, language)
            
            # –ó–∞–∫–∞–∑—ã
            elif text.startswith('üì¶ –ó–∞–∫–∞–∑ #'):
                order_id = text.split('#')[1]
                self.show_order_details_by_id(message, order_id, user_id, language)
            
            # –ü–æ–∏—Å–∫
            elif self.user_states.get(telegram_id) == 'searching':
                self.perform_search(message, text, language)
            
            # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            elif 'voice' in message:
                self.handle_voice_search(message, user_id, language)
            
            # –§–æ—Ç–æ (–ø–æ–∏—Å–∫ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É)
            elif 'photo' in message:
                self.handle_barcode_search(message, user_id, language)
            
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            else:
                self.handle_unknown_command(message, text, user_id, language)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.bot.send_message(
                message['chat']['id'],
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        try:
            data = callback_query['data']
            chat_id = callback_query['message']['chat']['id']
            message_id = callback_query['message']['message_id']
            telegram_id = callback_query['from']['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_telegram_id(telegram_id)
            if not user_data:
                return
            
            user_id = user_data[0][0]
            language = user_data[0][5]
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
            if data.startswith('add_to_cart_'):
                product_id = int(data.split('_')[3])
                self.add_to_cart_callback(callback_query, product_id, user_id, language)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            elif data.startswith('add_to_favorites_'):
                product_id = int(data.split('_')[3])
                self.add_to_favorites_callback(callback_query, product_id, user_id, language)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π
            elif data.startswith('cart_'):
                self.handle_cart_callback(callback_query, data, user_id, language)
            
            # –û—Ü–µ–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞
            elif data.startswith('rate_'):
                self.handle_rating_callback(callback_query, data, user_id, language)
            
            # –û—Ç–∑—ã–≤—ã
            elif data.startswith('reviews_'):
                product_id = int(data.split('_')[1])
                self.show_product_reviews(callback_query, product_id, language)
            
            # –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            elif data.startswith('sort_') or data.startswith('price_') or data == 'reset_filters':
                self.handle_search_filter(callback_query, data, language)
            
            # –û–ø–ª–∞—Ç–∞
            elif data.startswith('pay_'):
                self.handle_payment_callback(callback_query, data, user_id, language)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    def start_registration(self, message):
        """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ Telegram
        first_name = message['from'].get('first_name', '')
        last_name = message['from'].get('last_name', '')
        suggested_name = f"{first_name} {last_name}".strip()
        
        self.user_states[telegram_id] = 'registration_name'
        
        welcome_text = "üõç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!</b>\n\n"
        welcome_text += "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
        welcome_text += "üë§ <b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>"
        
        keyboard = create_registration_keyboard('name', suggested_name)
        
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def handle_registration_step(self, message, state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        if text == '‚ùå –û—Ç–º–µ–Ω–∞':
            del self.user_states[telegram_id]
            self.bot.send_message(
                chat_id,
                "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
            )
            return
        
        if state == 'registration_name':
            if len(text) < 2:
                self.bot.send_message(
                    chat_id,
                    "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            self.user_states[telegram_id] = f'registration_phone:{text}'
            
            phone_text = f"üì± <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
            phone_text += "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ –∑–∞–∫–∞–∑—É."
            
            keyboard = create_registration_keyboard('phone')
            self.bot.send_message(chat_id, phone_text, keyboard)
        
        elif state.startswith('registration_phone:'):
            name = state.split(':', 1)[1]
            phone = None
            
            if text != '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                if 'contact' in message:
                    phone = message['contact']['phone_number']
                else:
                    phone = validate_phone(text)
                    if not phone:
                        self.bot.send_message(
                            chat_id,
                            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
                        )
                        return
            
            self.user_states[telegram_id] = f'registration_email:{name}:{phone or ""}'
            
            email_text = f"üìß <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n\n"
            email_text += "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö."
            
            keyboard = create_registration_keyboard('email')
            self.bot.send_message(chat_id, email_text, keyboard)
        
        elif state.startswith('registration_email:'):
            parts = state.split(':', 2)
            name = parts[1]
            phone = parts[2] if parts[2] else None
            email = None
            
            if text != '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                if not validate_email(text):
                    self.bot.send_message(
                        chat_id,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
                    )
                    return
                email = text
            
            self.user_states[telegram_id] = f'registration_language:{name}:{phone or ""}:{email or ""}'
            
            language_text = f"üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</b>\n\n"
            language_text += "–í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            
            keyboard = create_registration_keyboard('language')
            self.bot.send_message(chat_id, language_text, keyboard)
        
        elif state.startswith('registration_language:'):
            parts = state.split(':', 3)
            name = parts[1]
            phone = parts[2] if parts[2] else None
            email = parts[3] if parts[3] else None
            
            language = 'ru'
            if text == 'üá∫üáø O\'zbekcha':
                language = 'uz'
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = self.db.add_user(telegram_id, name, phone, email, language)
            
            if user_id:
                del self.user_states[telegram_id]
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
                self.db.execute_query(
                    'INSERT OR IGNORE INTO loyalty_points (user_id) VALUES (?)',
                    (user_id,)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                success_text = t('registration_complete', language=language)
                keyboard = create_main_keyboard()
                
                self.bot.send_message(chat_id, success_text, keyboard)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Å–µ—Ä–∏—é
                if hasattr(self, 'marketing_automation') and self.marketing_automation:
                    self.marketing_automation.create_welcome_series(user_id)
            else:
                self.bot.send_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    
    def show_main_menu(self, message, user_data):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        chat_id = message['chat']['id']
        name = user_data[1]
        language = user_data[5]
        
        welcome_text = t('welcome_back', language=language)
        welcome_text = welcome_text.replace('{name}', name)
        
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, welcome_text, keyboard)
    
    def show_catalog(self, message, language):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        chat_id = message['chat']['id']
        
        categories = self.db.get_categories()
        
        if categories:
            catalog_text = f"üõç <b>{t('catalog_title', language=language)}</b>\n\n"
            catalog_text += f"{t('choose_category', language=language)}"
            
            keyboard = create_categories_keyboard(categories)
            self.bot.send_message(chat_id, catalog_text, keyboard)
        else:
            self.bot.send_message(
                chat_id,
                "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
    
    def handle_category_selection(self, message, text, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        chat_id = message['chat']['id']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        category_name = text.split(' ', 1)[1] if ' ' in text else text[2:]
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = self.db.execute_query(
            'SELECT id FROM categories WHERE name = ? AND is_active = 1',
            (category_name,)
        )
        
        if category:
            category_id = category[0][0]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–±—Ä–µ–Ω–¥—ã
            subcategories = self.db.get_products_by_category(category_id)
            
            if subcategories:
                subcategory_text = f"üìÇ <b>{category_name}</b>\n\n"
                subcategory_text += "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
                
                keyboard = create_subcategories_keyboard(subcategories)
                self.bot.send_message(chat_id, subcategory_text, keyboard)
            else:
                self.bot.send_message(
                    chat_id,
                    f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"
                )
    
    def handle_subcategory_selection(self, message, text, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory_name = text.split(' ', 1)[1] if ' ' in text else text[2:]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        subcategory = self.db.execute_query(
            'SELECT id FROM subcategories WHERE name = ? AND is_active = 1',
            (subcategory_name,)
        )
        
        if subcategory:
            subcategory_id = subcategory[0][0]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            products = self.db.get_products_by_subcategory(subcategory_id, limit=10)
            
            if products:
                products_text = f"üõç <b>{subcategory_name}</b>\n\n"
                products_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
                
                keyboard = create_products_keyboard(products)
                self.bot.send_message(chat_id, products_text, keyboard)
            else:
                self.bot.send_message(
                    chat_id,
                    f"‚ùå –í –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{subcategory_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"
                )
    
    def handle_product_selection(self, message, text, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞"""
        chat_id = message['chat']['id']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        product_text = text.replace('üõç ', '')
        product_name = product_text.split(' - $')[0]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
        product = self.db.execute_query(
            'SELECT * FROM products WHERE name = ? AND is_active = 1',
            (product_name,)
        )
        
        if product:
            product_data = product[0]
            product_id = product_data[0]
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            self.db.increment_product_views(product_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
            product_card = create_product_card(product_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
            reviews = self.db.get_product_reviews(product_id)
            if reviews:
                avg_rating = sum(review[0] for review in reviews) / len(reviews)
                product_card += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5 ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)"
            
            keyboard = create_product_inline_keyboard(product_id)
            
            if product_data[5]:  # image_url
                self.bot.send_photo(chat_id, product_data[5], product_card, keyboard)
            else:
                self.bot.send_message(chat_id, product_card, keyboard)
    
    def add_to_cart_callback(self, callback_query, product_id, user_id, language):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ callback"""
        chat_id = callback_query['message']['chat']['id']
        
        result = self.db.add_to_cart(user_id, product_id, 1)
        
        if result:
            product = self.db.get_product_by_id(product_id)
            success_text = f"‚úÖ <b>{product[1]}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
            keyboard = {
                'inline_keyboard': [
                    [
                        {'text': 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data': 'go_to_cart'},
                        {'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', 'callback_data': f'add_to_cart_{product_id}'}
                    ]
                ]
            }
            
            self.bot.send_message(chat_id, success_text, keyboard)
        else:
            self.bot.send_message(
                chat_id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
            )
    
    def show_cart(self, message, user_id, language):
        """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        chat_id = message['chat']['id']
        
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            empty_text = t('empty_cart', language=language)
            keyboard = create_cart_keyboard(False)
            self.bot.send_message(chat_id, empty_text, keyboard)
            return
        
        cart_text = f"üõí <b>{t('your_cart', language=language)}</b>\n\n"
        total_amount = 0
        
        for item in cart_items:
            cart_item_id, name, price, quantity, image_url, product_id = item
            item_total = price * quantity
            total_amount += item_total
            
            cart_text += f"üõç <b>{name}</b>\n"
            cart_text += f"üí∞ {format_price(price)} √ó {quantity} = {format_price(item_total)}\n\n"
        
        cart_text += f"üí≥ <b>–ò—Ç–æ–≥–æ: {format_price(total_amount)}</b>"
        
        keyboard = create_cart_keyboard(True)
        self.bot.send_message(chat_id, cart_text, keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        for item in cart_items:
            cart_item_id, name, price, quantity, image_url, product_id = item
            
            item_text = f"üõç <b>{name}</b>\n"
            item_text += f"üí∞ {format_price(price)} √ó {quantity} —à—Ç."
            
            keyboard = create_cart_item_keyboard(cart_item_id, quantity)
            
            if image_url:
                self.bot.send_photo(chat_id, image_url, item_text, keyboard)
            else:
                self.bot.send_message(chat_id, item_text, keyboard)
    
    def handle_cart_callback(self, callback_query, data, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π"""
        chat_id = callback_query['message']['chat']['id']
        message_id = callback_query['message']['message_id']
        
        parts = data.split('_')
        action = parts[1]
        cart_item_id = int(parts[2])
        
        if action == 'increase':
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            current_item = self.db.execute_query(
                'SELECT quantity FROM cart WHERE id = ?',
                (cart_item_id,)
            )
            
            if current_item:
                new_quantity = current_item[0][0] + 1
                self.db.update_cart_quantity(cart_item_id, new_quantity)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                new_keyboard = create_cart_item_keyboard(cart_item_id, new_quantity)
                self.bot.edit_message_reply_markup(chat_id, message_id, new_keyboard)
        
        elif action == 'decrease':
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            current_item = self.db.execute_query(
                'SELECT quantity FROM cart WHERE id = ?',
                (cart_item_id,)
            )
            
            if current_item:
                new_quantity = max(0, current_item[0][0] - 1)
                
                if new_quantity == 0:
                    self.db.remove_from_cart(cart_item_id)
                    self.bot.send_message(chat_id, "üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
                else:
                    self.db.update_cart_quantity(cart_item_id, new_quantity)
                    new_keyboard = create_cart_item_keyboard(cart_item_id, new_quantity)
                    self.bot.edit_message_reply_markup(chat_id, message_id, new_keyboard)
        
        elif action == 'remove':
            # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            self.db.remove_from_cart(cart_item_id)
            self.bot.send_message(chat_id, "üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    
    def start_order_process(self, message, user_id, language):
        """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        cart_items = self.db.get_cart_items(user_id)
        
        if not cart_items:
            self.bot.send_message(
                chat_id,
                t('empty_cart', language=language)
            )
            return
        
        self.user_states[telegram_id] = 'order_address'
        
        address_text = f"üìç <b>{t('delivery_address', language=language)}</b>\n\n"
        address_text += f"{t('enter_address', language=language)}"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, address_text, keyboard)
    
    def handle_order_process(self, message, state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        text = message.get('text', '')
        
        if text in ['üîô –ù–∞–∑–∞–¥', '‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞']:
            del self.user_states[telegram_id]
            self.show_cart(message, self.get_user_id_by_telegram(telegram_id), 
                          get_user_language(self.db, telegram_id))
            return
        
        if state == 'order_address':
            if len(text) < 10:
                self.bot.send_message(
                    chat_id,
                    "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
                )
                return
            
            self.user_states[telegram_id] = f'order_payment:{text}'
            
            payment_text = f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>\n\n"
            payment_text += "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
            
            keyboard = create_payment_methods_keyboard(get_user_language(self.db, telegram_id))
            self.bot.send_message(chat_id, payment_text, keyboard)
        
        elif state.startswith('order_payment:'):
            address = state.split(':', 1)[1]
            payment_method = text
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            user_id = self.get_user_id_by_telegram(telegram_id)
            cart_items = self.db.get_cart_items(user_id)
            total_amount = sum(item[2] * item[3] for item in cart_items)
            
            order_id = self.db.create_order(user_id, total_amount, address, payment_method)
            
            if order_id:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
                self.db.add_order_items(order_id, cart_items)
                
                # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                self.db.clear_cart(user_id)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del self.user_states[telegram_id]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                success_text = f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                success_text += f"üí∞ –°—É–º–º–∞: {format_price(total_amount)}\n"
                success_text += f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                success_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {payment_method}\n\n"
                success_text += f"üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                success_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
                
                keyboard = create_main_keyboard()
                self.bot.send_message(chat_id, success_text, keyboard)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                if self.notification_manager:
                    self.notification_manager.send_order_notification_to_admins(order_id)
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
                points_earned = int(total_amount * 0.05)  # 5% –æ—Ç —Å—É–º–º—ã
                self.db.update_loyalty_points(user_id, points_earned)
                
                if points_earned > 0:
                    points_text = f"‚≠ê –ù–∞—á–∏—Å–ª–µ–Ω–æ {points_earned} –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏!"
                    self.bot.send_message(chat_id, points_text)
            else:
                self.bot.send_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
    
    def show_user_orders(self, message, user_id, language):
        """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message['chat']['id']
        
        orders = self.db.get_user_orders(user_id)
        
        if not orders:
            no_orders_text = f"üìã <b>{t('no_orders', language=language)}</b>\n\n"
            no_orders_text += f"{t('make_first_order', language=language)}"
            
            keyboard = create_main_keyboard()
            self.bot.send_message(chat_id, no_orders_text, keyboard)
            return
        
        orders_text = f"üìã <b>{t('your_orders', language=language)}</b>\n\n"
        
        for order in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            order_id, user_id, total_amount, status, delivery_address, payment_method, created_at = order[:7]
            
            status_emoji = {
                'pending': '‚è≥',
                'confirmed': '‚úÖ',
                'shipped': 'üöö',
                'delivered': 'üì¶',
                'cancelled': '‚ùå'
            }.get(status, '‚ùì')
            
            orders_text += f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
            orders_text += f"üí∞ {format_price(total_amount)}\n"
            orders_text += f"üìÖ {format_date(created_at)}\n"
            orders_text += f"üì¶ {ORDER_STATUSES.get(status, status)}\n\n"
        
        if len(orders) > 10:
            orders_text += f"... –∏ –µ—â–µ {len(orders) - 10} –∑–∞–∫–∞–∑–æ–≤\n\n"
        
        orders_text += f"üìã –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: /order_ID"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, orders_text, keyboard)
    
    def show_order_details(self, message, command):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        try:
            order_id = int(command.split('_')[1])
        except (IndexError, ValueError):
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
        
        user_id = self.get_user_id_by_telegram(telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        order = self.db.execute_query(
            'SELECT * FROM orders WHERE id = ? AND user_id = ?',
            (order_id, user_id)
        )
        
        if not order:
            self.bot.send_message(chat_id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        order_details = self.db.get_order_details(order_id)
        
        if order_details:
            order_data = order_details['order']
            items = order_details['items']
            
            details_text = f"üì¶ <b>–ó–∞–∫–∞–∑ #{order_data[0]}</b>\n\n"
            details_text += f"üìÖ –î–∞—Ç–∞: {format_date(order_data[7])}\n"
            details_text += f"üì¶ –°—Ç–∞—Ç—É—Å: {ORDER_STATUSES.get(order_data[3], order_data[3])}\n"
            details_text += f"üí≥ –û–ø–ª–∞—Ç–∞: {PAYMENT_METHODS.get(order_data[5], order_data[5])}\n"
            
            if order_data[4]:
                details_text += f"üìç –ê–¥—Ä–µ—Å: {order_data[4]}\n"
            
            details_text += f"\nüõç <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
            
            for item in items:
                quantity, price, name, image_url = item
                details_text += f"‚Ä¢ {name} √ó {quantity} = {format_price(price * quantity)}\n"
            
            details_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {format_price(order_data[2])}</b>"
            
            keyboard = create_back_keyboard()
            self.bot.send_message(chat_id, details_text, keyboard)
    
    def start_search(self, message, language):
        """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        self.user_states[telegram_id] = 'searching'
        
        search_text = f"üîç <b>{t('search_products', language=language)}</b>\n\n"
        search_text += f"{t('enter_search_query', language=language)}"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, search_text, keyboard)
    
    def perform_search(self, message, query, language):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        if telegram_id in self.user_states:
            del self.user_states[telegram_id]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        user_id = self.get_user_id_by_telegram(telegram_id)
        self.db.execute_query(
            'INSERT INTO user_activity_logs (user_id, action, search_query) VALUES (?, ?, ?)',
            (user_id, 'search', query)
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        products = self.db.search_products(query, limit=10)
        
        if products:
            search_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'</b>\n\n"
            search_text += f"–ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä(–æ–≤):"
            
            keyboard = create_products_keyboard(products, show_back=False)
            self.bot.send_message(chat_id, search_text, keyboard)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filters_text = "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞:"
            filters_keyboard = create_search_filters_keyboard()
            self.bot.send_message(chat_id, filters_text, filters_keyboard)
        else:
            no_results_text = f"‚ùå <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
            if hasattr(self, 'ai_recommendations') and self.ai_recommendations:
                suggestions = self.ai_recommendations.get_smart_search_suggestions(query)
                if suggestions:
                    no_results_text += "üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:\n"
                    for suggestion in suggestions:
                        no_results_text += f"‚Ä¢ {suggestion}\n"
            
            keyboard = create_back_keyboard()
            self.bot.send_message(chat_id, no_results_text, keyboard)
    
    def show_profile(self, message, user_data):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = message['chat']['id']
        user_id, telegram_id, name, phone, email, language = user_data[:6]
        
        profile_text = f"üë§ <b>{t('your_profile', language=language)}</b>\n\n"
        profile_text += f"üìù –ò–º—è: {name}\n"
        
        if phone:
            profile_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        if email:
            profile_text += f"üìß Email: {email}\n"
        
        profile_text += f"üåç –Ø–∑—ã–∫: {'üá∑üá∫ –†—É—Å—Å–∫–∏–π' if language == 'ru' else 'üá∫üáø O\'zbekcha'}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        order_stats = self.db.execute_query('''
            SELECT COUNT(*), COALESCE(SUM(total_amount), 0)
            FROM orders WHERE user_id = ? AND status != 'cancelled'
        ''', (user_id,))
        
        if order_stats:
            orders_count, total_spent = order_stats[0]
            profile_text += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            profile_text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {orders_count}\n"
            profile_text += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {format_price(total_spent)}\n"
        
        # –ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        loyalty_data = self.db.get_user_loyalty_points(user_id)
        if loyalty_data:
            profile_text += f"‚≠ê –ë–∞–ª–ª—ã: {loyalty_data[2]} ({loyalty_data[4]})\n"
        
        keyboard = {
            'keyboard': [
                ['üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', 'üìß –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã'],
                ['üîô –ì–ª–∞–≤–Ω–∞—è']
            ],
            'resize_keyboard': True
        }
        
        self.bot.send_message(chat_id, profile_text, keyboard)
    
    def show_loyalty_program(self, message, user_id, language):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
        chat_id = message['chat']['id']
        
        loyalty_data = self.db.get_user_loyalty_points(user_id)
        
        loyalty_text = f"‚≠ê <b>{t('loyalty_program', language=language)}</b>\n\n"
        
        if loyalty_data:
            current_points = loyalty_data[2]
            total_earned = loyalty_data[3]
            current_tier = loyalty_data[4]
            
            loyalty_text += f"üíé –í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>{current_tier}</b>\n"
            loyalty_text += f"‚≠ê –¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: <b>{current_points}</b>\n"
            loyalty_text += f"üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_earned}</b>\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏
            tier_thresholds = {
                'Bronze': 0,
                'Silver': 100,
                'Gold': 500,
                'Platinum': 1500,
                'Diamond': 5000
            }
            
            loyalty_text += f"üèÖ <b>–£—Ä–æ–≤–Ω–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:</b>\n"
            for tier, threshold in tier_thresholds.items():
                if current_points >= threshold:
                    loyalty_text += f"‚úÖ {tier} (–æ—Ç {threshold} –±–∞–ª–ª–æ–≤)\n"
                else:
                    loyalty_text += f"üîí {tier} (–æ—Ç {threshold} –±–∞–ª–ª–æ–≤)\n"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, loyalty_text, keyboard)
    
    def show_available_promos(self, message, user_id, language):
        """–ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
        chat_id = message['chat']['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
        available_promos = self.db.execute_query('''
            SELECT code, discount_type, discount_value, min_order_amount, description
            FROM promo_codes
            WHERE is_active = 1
            AND (expires_at IS NULL OR expires_at > datetime('now'))
            AND (max_uses IS NULL OR (
                SELECT COUNT(*) FROM promo_uses WHERE promo_code_id = promo_codes.id
            ) < max_uses)
            AND id NOT IN (
                SELECT promo_code_id FROM promo_uses WHERE user_id = ?
            )
            ORDER BY discount_value DESC
        ''', (user_id,))
        
        if available_promos:
            promo_text = f"üéÅ <b>{t('available_promos', language=language)}</b>\n\n"
            
            for promo in available_promos:
                code, discount_type, discount_value, min_amount, description = promo
                
                promo_text += f"üè∑ <code>{code}</code>\n"
                
                if discount_type == 'percentage':
                    promo_text += f"üí∞ –°–∫–∏–¥–∫–∞ {discount_value}%"
                else:
                    promo_text += f"üí∞ –°–∫–∏–¥–∫–∞ {format_price(discount_value)}"
                
                if min_amount > 0:
                    promo_text += f" (–æ—Ç {format_price(min_amount)})"
                
                promo_text += f"\nüìù {description}\n\n"
            
            promo_text += f"üí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: /promo_–ö–û–î"
        else:
            promo_text = f"üéÅ <b>{t('no_promos', language=language)}</b>\n\n"
            promo_text += f"{t('check_later', language=language)}"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, promo_text, keyboard)
    
    def handle_unknown_command(self, message, text, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        chat_id = message['chat']['id']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI –ø–æ–¥–¥–µ—Ä–∂–∫—É
        if hasattr(self, 'chatbot_support') and self.chatbot_support:
            ai_response = self.chatbot_support.find_best_answer(text)
            if ai_response:
                self.bot.send_message(chat_id, ai_response)
                return
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        unknown_text = f"‚ùì <b>{t('unknown_command', language=language)}</b>\n\n"
        unknown_text += f"{t('use_menu_buttons', language=language)}"
        
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, unknown_text, keyboard)
    
    def get_user_id_by_telegram(self, telegram_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        user_data = self.db.get_user_by_telegram_id(telegram_id)
        return user_data[0][0] if user_data else None
    
    def handle_voice_search(self, message, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        chat_id = message['chat']['id']
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        voice_text = f"üé§ <b>{t('voice_search', language=language)}</b>\n\n"
        voice_text += f"{t('voice_search_coming_soon', language=language)}\n\n"
        voice_text += f"üí° –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: üîç –ü–æ–∏—Å–∫"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, voice_text, keyboard)
    
    def handle_barcode_search(self, message, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É"""
        chat_id = message['chat']['id']
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
        barcode_text = f"üì∑ <b>{t('barcode_search', language=language)}</b>\n\n"
        barcode_text += f"{t('barcode_search_coming_soon', language=language)}\n\n"
        barcode_text += f"üí° –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: üîç –ü–æ–∏—Å–∫"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, barcode_text, keyboard)
    
    def show_help(self, message, language):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
        chat_id = message['chat']['id']
        
        help_text = t('help', language=language)
        keyboard = create_back_keyboard()
        
        self.bot.send_message(chat_id, help_text, keyboard)
    
    def clear_cart(self, message, user_id, language):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
        chat_id = message['chat']['id']
        
        self.db.clear_cart(user_id)
        
        cleared_text = f"üóë <b>{t('cart_cleared', language=language)}</b>\n\n"
        cleared_text += f"{t('cart_cleared_message', language=language)}"
        
        keyboard = create_main_keyboard()
        self.bot.send_message(chat_id, cleared_text, keyboard)
    
    def change_language(self, message, current_language):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        self.user_states[telegram_id] = 'changing_language'
        
        language_text = "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang</b>\n\n"
        language_text += "üá∑üá∫ –†—É—Å—Å–∫–∏–π\n"
        language_text += "üá∫üáø O'zbekcha"
        
        keyboard = create_language_keyboard()
        self.bot.send_message(chat_id, language_text, keyboard)
    
    def handle_back_navigation(self, message, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_data = self.db.execute_query('SELECT * FROM users WHERE id = ?', (user_id,))[0]
        self.show_main_menu(message, user_data)
    
    def track_shipment(self, message, command):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏"""
        chat_id = message['chat']['id']
        
        try:
            tracking_number = command.split('_', 1)[1]
        except IndexError:
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        tracking_text = f"üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏</b>\n\n"
        tracking_text += f"üìç –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: <code>{tracking_number}</code>\n\n"
        tracking_text += f"üöö –°—Ç–∞—Ç—É—Å: –í –ø—É—Ç–∏\n"
        tracking_text += f"üìÖ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: –∑–∞–≤—Ç—Ä–∞\n\n"
        tracking_text += f"üìû –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, tracking_text, keyboard)
    
    def apply_promo_code(self, message, command):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        try:
            promo_code = command.split('_', 1)[1].upper()
        except IndexError:
            self.bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
        
        user_id = self.get_user_id_by_telegram(telegram_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart_items = self.db.get_cart_items(user_id)
        if not cart_items:
            self.bot.send_message(
                chat_id,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É"
            )
            return
        
        cart_total = sum(item[2] * item[3] for item in cart_items)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        from promotions import PromotionManager
        promo_manager = PromotionManager(self.db)
        
        validation = promo_manager.validate_promo_code(promo_code, user_id, cart_total)
        
        if validation['valid']:
            promo_text = f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>\n\n"
            promo_text += f"üè∑ –ö–æ–¥: <code>{promo_code}</code>\n"
            promo_text += f"üí∞ –°–∫–∏–¥–∫–∞: {format_price(validation['discount_amount'])}\n"
            promo_text += f"üìù {validation['description']}\n\n"
            promo_text += f"üõí –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏"
        else:
            promo_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
            promo_text += f"üè∑ –ö–æ–¥: <code>{promo_code}</code>\n"
            promo_text += f"üìù {validation['error']}"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, promo_text, keyboard)
    
    def restore_saved_order(self, message, command):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        chat_id = message['chat']['id']
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        restore_text = f"üíæ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        restore_text += f"–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        restore_text += f"üí° –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, restore_text, keyboard)
    
    def show_advanced_search(self, message, language):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"""
        chat_id = message['chat']['id']
        
        advanced_text = f"üîß <b>{t('advanced_search', language=language)}</b>\n\n"
        advanced_text += f"{t('advanced_search_description', language=language)}"
        
        keyboard = create_search_filters_keyboard()
        self.bot.send_message(chat_id, advanced_text, keyboard)
    
    def start_tracking(self, message, language):
        """–ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        chat_id = message['chat']['id']
        telegram_id = message['from']['id']
        
        self.user_states[telegram_id] = 'tracking'
        
        tracking_text = f"üì¶ <b>{t('track_order', language=language)}</b>\n\n"
        tracking_text += f"{t('enter_tracking_number', language=language)}"
        
        keyboard = create_back_keyboard()
        self.bot.send_message(chat_id, tracking_text, keyboard)
    
    def add_to_favorites_callback(self, callback_query, product_id, user_id, language):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        chat_id = callback_query['message']['chat']['id']
        
        result = self.db.add_to_favorites(user_id, product_id)
        
        if result:
            product = self.db.get_product_by_id(product_id)
            favorites_text = f"‚ù§Ô∏è <b>{product[1]}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
        else:
            favorites_text = "‚ù§Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!"
        
        self.bot.send_message(chat_id, favorites_text)
    
    def handle_rating_callback(self, callback_query, data, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        chat_id = callback_query['message']['chat']['id']
        
        parts = data.split('_')
        product_id = int(parts[1])
        rating = int(parts[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        self.db.add_review(user_id, product_id, rating, "")
        
        rating_text = f"‚≠ê –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n"
        rating_text += f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤–µ–∑–¥ —Ç–æ–≤–∞—Ä—É."
        
        self.bot.send_message(chat_id, rating_text)
    
    def show_product_reviews(self, callback_query, product_id, language):
        """–ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–µ"""
        chat_id = callback_query['message']['chat']['id']
        
        reviews = self.db.get_product_reviews(product_id)
        product = self.db.get_product_by_id(product_id)
        
        if reviews:
            reviews_text = f"üìä <b>–û—Ç–∑—ã–≤—ã: {product[1]}</b>\n\n"
            
            avg_rating = sum(review[0] for review in reviews) / len(reviews)
            reviews_text += f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}/5 ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
            
            for review in reviews[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                rating, comment, created_at, user_name = review
                stars = '‚≠ê' * rating
                
                reviews_text += f"{stars} <b>{user_name}</b>\n"
                if comment:
                    reviews_text += f"üí≠ {comment}\n"
                reviews_text += f"üìÖ {format_date(created_at)}\n\n"
        else:
            reviews_text = f"üìä <b>–û—Ç–∑—ã–≤—ã: {product[1]}</b>\n\n"
            reviews_text += "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ–± —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ.\n"
            reviews_text += "–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–∑—ã–≤!"
        
        self.bot.send_message(chat_id, reviews_text)
    
    def handle_search_filter(self, callback_query, data, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞"""
        chat_id = callback_query['message']['chat']['id']
        
        if data == 'sort_price_low':
            filter_text = "üí∞ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã"
        elif data == 'sort_price_high':
            filter_text = "üí∞ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã"
        elif data == 'sort_popular':
            filter_text = "üî• –ü–æ–∫–∞–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        elif data == 'sort_newest':
            filter_text = "üÜï –ü–æ–∫–∞–∑ –Ω–æ–≤–∏–Ω–æ–∫"
        elif data == 'sort_sales':
            filter_text = "üìä –ü–æ–∫–∞–∑ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
        elif data == 'reset_filters':
            filter_text = "üîç –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã"
        else:
            filter_text = "üîß –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω"
        
        self.bot.send_message(chat_id, filter_text)
    
    def handle_payment_callback(self, callback_query, data, user_id, language):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
        chat_id = callback_query['message']['chat']['id']
        
        parts = data.split('_')
        provider = parts[1]
        order_id = int(parts[2])
        
        if provider == 'cash':
            # –ù–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
            cash_text = f"üíµ <b>–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏</b>\n\n"
            cash_text += f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n"
            cash_text += f"üí∞ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
            cash_text += f"üìû –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
            
            self.bot.send_message(chat_id, cash_text)
        else:
            # –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞
            if self.payment_processor:
                try:
                    amount = float(parts[3])
                    user_data = self.db.execute_query(
                        'SELECT name, phone, email FROM users WHERE id = ?',
                        (user_id,)
                    )[0]
                    
                    payment_data = {
                        'telegram_id': callback_query['from']['id'],
                        'name': user_data[0],
                        'phone': user_data[1],
                        'email': user_data[2]
                    }
                    
                    payment_result = self.payment_processor.create_payment(
                        provider, amount, order_id, payment_data
                    )
                    
                    if payment_result:
                        from payments import format_payment_info
                        payment_text = format_payment_info(payment_result)
                        self.bot.send_message(chat_id, payment_text)
                    else:
                        self.bot.send_message(
                            chat_id,
                            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±."
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
                    self.bot.send_message(
                        chat_id,
                        "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
                    )